import "dotenv/config";
import { Bot, GrammyError, HttpError, InlineKeyboard, Keyboard } from "grammy";
import {
  addingContact,
  fetchComments,
  fetchEmployees,
  fetchPosts,
} from "./api.js";
import { hydrate } from "@grammyjs/hydrate";
import express from 'express'


const app = express()

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

const products = [
  "–ö—É–±–∏–∫",
  "–¢–µ–ª–µ—Ñ–æ–Ω",
  "–†—É—á–∫–∞",
  "–°—Ç–∞–∫–∞–Ω",
  "–ó–∞–º–µ—Ç–∫–∞",
  "–ö–Ω–∏–≥–∞",
].join("\n");

async function broadcastMessage(message) {
  try {
    await bot.api.sendMessage("982478044", message);
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${982478044}`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${982478044}:`, error);
  }
}

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  {
    command: "menu",
    description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é",
  },
  // {
  //   command: "posts",
  //   description: "–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤",
  // },
  // {
  //   command: "comments",
  //   description: "–°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
  // },
  // {
  //   command: "employees",
  //   description: "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
  // },
  // {
  //   command: "mood",
  //   description: "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
  // },
  // {
  //   command: "shared",
  //   description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏",
  // },
]);

bot.command("start", async (ctx) => {
  setTimeout(async () => {
    await ctx.react("üéÑ");
  }, 1000);
  const chatId = ctx.chat.id;
  console.log(chatId);
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç!");
});

const menuKeyboard = new InlineKeyboard()
  .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "order-status")
  .text("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "support");

const backKeyboard = new InlineKeyboard().text("< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
    reply_markup: menuKeyboard
  });
});

bot.callbackQuery('order-status', async (ctx) => {
  await ctx.callbackQuery.message.editText("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –û—Ñ–æ—Ä–º–ª–µ–Ω", {
    reply_markup: backKeyboard
  })
  await ctx.answerCallbackQuery()
});

bot.callbackQuery('support', async (ctx) => {
  await ctx.callbackQuery.message.editText("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ", {
    reply_markup: backKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.callbackQuery('back', async (ctx) => {
  await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", {
    reply_markup: menuKeyboard
  })
  await ctx.answerCallbackQuery()
})

// bot.on('message', async (ctx) => {
//   console.log(ctx.update.message.text)
//   if (ctx.chat.id === 2080554505) {
//     await broadcastMessage(ctx.update.message.text);
//   }
// });

// bot.command("mood", async (ctx) => {
//   console.log('Command "mood" received'); // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
//
//   const moodLabels = ["–ü–æ—Å—Ç—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "–ü—Ä–æ—Ñ–∏–ª—å"];
//   const rows = moodLabels.map((label) => [Keyboard.text(label)]);
//   const moodKeyboard = Keyboard.from(rows).resized();
//
//   console.log(JSON.stringify(moodKeyboard, null, 2), "moodKeyboard");
//   await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é?", {
//     reply_markup: moodKeyboard,
//   });
// });
//
// bot.command("shared", async (ctx) => {
//   const shareKeyboard = new Keyboard()
//     .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
//     .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
//     .requestPoll("–û–ø—Ä–æ—Å")
//     .placeholder("–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ...")
//     .resized();
//
//   await ctx.reply("–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?", {
//     reply_markup: shareKeyboard
//   })
// });
//
// bot.command('inline_keyboard', async (ctx) => {
//   const inlineKeyboard = new InlineKeyboard()
//     .text('1', 'button-1')
//     .text('2', 'button-2')
//     .text('3', 'button-3')
//
//   await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É', {
//     reply_markup: inlineKeyboard
//   })
// })

// bot.callbackQuery(['button-1', 'button-2', 'button-3'], async (ctx) => {
//   await ctx.answerCallbackQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${ctx.callbackQuery.data}`)
//   await ctx.reply({
//     text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${ctx.callbackQuery.data}`,
//     reply_markup: {
//       remove_keyboard: true
//     }
//   })
// })

// bot.on('callback_query:data', async (ctx) => {
//   await ctx.answerCallbackQuery()
//   await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${ctx.callbackQuery.data}`)
// })
//
//
//
// bot.on(':contact', async (ctx) => {
//   const response = await addingContact(ctx.update.message.contact);
//   await ctx.reply(response)
// })

// bot.hears('123', async (ctx) => {
//   await ctx.reply(products, {
//     reply_markup: {remove_keyboard: true}
//   })
// })

// bot.command("products", async (ctx) => {
//   await ctx.reply(products);
// });
//
// bot.command("posts", async (ctx) => {
//   const posts = await fetchPosts();
//   for (const post of posts.data) {
//     await ctx.reply(post.title);
//   }
// });
//
// bot.command("comments", async (ctx) => {
//   const comments = await fetchComments();
//   console.log(comments);
//   for (const comment of comments.data) {
//     await ctx.reply(comment.body);
//   }
// });
//
// bot.command("employees", async (ctx) => {
//   const employees = await fetchEmployees();
//   for (const employee of employees.data) {
//     await ctx.reply(employee.name);
//   }
// });

// bot.command(['say_hello', 'hello', 'say_hi'], async (ctx) => {
//     await ctx.reply('Hello');
//    });

// bot.on('message', async (ctx) => {
//     await ctx.reply(ctx.update.message.text)
// })

bot.catch((err) => {
  const ctx = err.ctx;
  console.log(`Error while handling  update ${ctx.update.update_id}`);

  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request: ", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram: ", e);
  } else {
    console.error("Unknown error: ", e);
  }
});

bot.start();
